# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main ]


# jobs:

#   continuous-integration:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Set up Python all python version
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.8
#           architecture: x64

#       - name: Install Python Virtual ENV
#         run: pip3 install virtualenv

#       - name:  Setup Virtual env
#         uses: actions/cache@v2
#         id: cache-venv
#         with:
#           path: venv
#           key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-venv-

#       - name: Activate and Install Depencies into Virtual env
#         run: python -m venv venv && source venv/bin/activate &&
#           pip3 install -r requirements.txt
#         if: steps.cache-venv.outputs.cache-hit != 'true'


#       # Install all the app dependencies
#       - name: Install dependencies
#         run: |
#           pip3 install -r requirements.txt
#           python -m spacy download en_core_web_sm


#       # Build the app and run tests
#       - name: Build and Run Test
#         run: . venv/bin/activate && pytest tests/test.py

#       - name: Create Zipfile archive of Dependencies
#         run: |
#           cd ./venv/lib/python3.8/site-packages
#           zip -r9 ../../../../api.zip .

#       - name: Add App to Zipfile
#         run: cd ./app && zip -g ../api.zip -r .

#       - name: Upload zip file artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: api
#           path: api.zip


#   continuous-deployment:
#     runs-on: ubuntu-latest
#     needs: [continuous-integration]
#     if: github.ref == 'refs/heads/main'
#     steps:

#       - name: Install AWS CLI
#         uses: unfor19/install-aws-cli-action@v1
#         with:
#           version: 1
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-2

#       - name: Download Lambda api.zip
#         uses: actions/download-artifact@v2
#         with:
#           name: api

#       - name: Upload to S3
#         run: aws s3 cp api.zip s3://my-temp-buket/api.zip
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-2

#       - name: Deploy new Lambda
#         run: aws lambda update-function-code --function-name lambda_handler --s3-bucket my-temp-buket --s3-key api.zip
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-2


